import React, { useState, useEffect } from "react";

const MovingSun = () => {
  const startTime = 5.5; // 5:30 AM
  const endTime = 18.5; // 6:30 PM
  const [currentHour, setCurrentHour] = useState(
    new Date().getHours() + new Date().getMinutes() / 60
  );

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentHour(new Date().getHours() + new Date().getMinutes() / 60);
    }, 60000);
    return () => clearInterval(interval);
  }, []);

  const progress = Math.min(
    Math.max((currentHour - startTime) / (endTime - startTime), 0),
    1
  );

  const leftPadding = 0;
  const width = 200;
  const height = 50;
  const cx = 120 + leftPadding;
  const cy = 80;

  const t = Math.PI * progress;
  const sunX = cx - (width / 2) * Math.cos(t);
  const sunY = cy - height * Math.sin(t);

  const arcPath = `M${cx - width / 2},${cy} A${width / 2},${height} 0 0,1 ${
    cx + width / 2
  },${cy}`;

  return (
    <div
      style={{
        transform: "scale(0.8)", // ✅ Shrink proportionally
        transformOrigin: "top center", // ✅ Keep centered
      }}
    >
      <svg
        className="w-full h-24"
        style={{ overflow: "visible", height: "6rem" }}
      >
        {/* Flatter Arc */}
        <path
          d={arcPath}
          stroke="black"
          strokeDasharray="5 5"
          stroke-width="2"
          fill="none"
        />

        {/* Moving Sun */}
        <g transform={`translate(${sunX - 16}, ${sunY - 16})`}>
          <svg
            width="32"
            height="32"
            viewBox="0 0 32 32"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M15.9976 7.51948C11.3158 7.51948 7.52042 11.3158 7.52042 15.9962C7.52042 20.6792 11.3158 24.4755 15.9976 24.4755C20.6795 24.4755 24.4748 20.6792 24.4748 15.9962C24.4748 11.3158 20.6795 7.51948 15.9976 7.51948ZM14.1742 5.97528H17.8235C17.9922 5.97528 18.1484 5.89215 18.2466 5.7536C18.3423 5.61757 18.365 5.43872 18.307 5.28001L16.4812 0.337558C16.4056 0.133512 16.2142 0 15.9976 0C15.781 0 15.5896 0.136031 15.5141 0.337558L13.6882 5.28253C13.6302 5.44123 13.6529 5.61757 13.7486 5.75612C13.8468 5.89467 14.0055 5.97528 14.1742 5.97528ZM24.3741 10.2023C24.4698 10.3006 24.6032 10.3535 24.7367 10.3535C24.7669 10.3535 24.7972 10.3509 24.8274 10.3459C24.9936 10.3157 25.1321 10.2074 25.2052 10.0537L27.4113 5.2649C27.502 5.06841 27.4592 4.83917 27.3081 4.68551C27.1545 4.53184 26.9228 4.49154 26.7263 4.57971L21.9412 6.78895C21.7876 6.85948 21.6793 7.00055 21.6491 7.16681C21.6188 7.33307 21.6742 7.50185 21.7901 7.62277L24.3741 10.2023ZM31.6575 15.5151L26.7112 13.6913C26.5525 13.6333 26.3762 13.656 26.2377 13.7517C26.0992 13.8474 26.0186 14.0036 26.0186 14.1724L26.0211 17.8226C26.0211 17.9913 26.1042 18.15 26.2428 18.2458C26.3309 18.3037 26.4342 18.3365 26.5374 18.3365C26.5979 18.3365 26.6583 18.3264 26.7162 18.3037L31.6625 16.4799C31.864 16.4068 32 16.2129 32 15.9937C31.995 15.7821 31.8615 15.5906 31.6575 15.5151ZM25.2052 21.9438C25.1704 21.8683 25.1178 21.8022 25.0521 21.7514C24.9863 21.7005 24.9092 21.6663 24.8274 21.6516C24.6612 21.6239 24.4899 21.6768 24.3741 21.7952L21.7926 24.3772C21.6742 24.4956 21.6188 24.6669 21.6491 24.8332C21.6793 24.9969 21.7876 25.1405 21.9412 25.2111L26.7288 27.4178C26.7968 27.4505 26.8699 27.4631 26.9454 27.4631C27.0789 27.4631 27.2099 27.4102 27.3081 27.312C27.4617 27.1583 27.502 26.9291 27.4113 26.7326L25.2052 21.9438ZM17.821 26.0197L14.1717 26.0222C14.003 26.0222 13.8468 26.1053 13.7511 26.2439C13.6554 26.3824 13.6328 26.5588 13.6882 26.7149L15.5141 31.6624C15.5896 31.864 15.781 32 15.9976 32C16.2142 32 16.4056 31.864 16.4812 31.6624L18.307 26.7149C18.365 26.5562 18.3423 26.3799 18.2466 26.2414C18.1484 26.1028 17.9922 26.0197 17.821 26.0197ZM7.62116 21.7952C7.50279 21.6768 7.33405 21.6239 7.16783 21.6516C7.00161 21.6818 6.86058 21.7901 6.79006 21.9438L4.58388 26.7326C4.49321 26.9291 4.53602 27.1608 4.68965 27.312C4.76397 27.3865 4.8594 27.4364 4.96301 27.4549C5.06662 27.4734 5.17341 27.4595 5.2689 27.4153L10.0565 25.206C10.132 25.1712 10.198 25.1187 10.2489 25.0529C10.2998 24.9871 10.334 24.91 10.3487 24.8282C10.3789 24.6619 10.3235 24.4931 10.2051 24.3747L7.62116 21.7952ZM5.46282 18.339C5.56608 18.339 5.66934 18.3062 5.75748 18.2458C5.896 18.15 5.97911 17.9913 5.97911 17.8226L5.97659 14.1724C5.97661 14.0894 5.9566 14.0077 5.91826 13.9342C5.87992 13.8606 5.8244 13.7974 5.7564 13.7499C5.6884 13.7024 5.60994 13.6721 5.5277 13.6614C5.44546 13.6508 5.36186 13.6601 5.28401 13.6887L0.337726 15.5151C0.238689 15.5514 0.153191 15.6173 0.0927903 15.7038C0.0323898 15.7903 0 15.8932 0 15.9987C0 16.1042 0.0323898 16.2072 0.0927903 16.2937C0.153191 16.3802 0.238689 16.4461 0.337726 16.4824L5.28653 18.3062C5.34445 18.3289 5.40238 18.339 5.46282 18.339ZM6.79258 10.0537C6.82746 10.1292 6.88004 10.1951 6.94586 10.2459C7.01168 10.2967 7.08879 10.3308 7.17064 10.3454C7.25248 10.36 7.33664 10.3546 7.41595 10.3297C7.49527 10.3048 7.56739 10.2611 7.62619 10.2023L10.2051 7.62025C10.3235 7.49933 10.3764 7.33055 10.3461 7.16429C10.3159 7.00055 10.2076 6.85948 10.054 6.78895L5.26386 4.58222C5.06742 4.49154 4.83824 4.53436 4.68461 4.68803C4.53099 4.84169 4.49069 5.07093 4.58136 5.26742L6.79258 10.0537Z"
              fill="#FCC21B"
            />
          </svg>
        </g>

        {/* Time Labels */}
        <text
          x={leftPadding - 10}
          y="95"
          className="text-sm font-bold fill-green-700"
        >
          5:30 AM
        </text>
        <text
          x={cx + width / 2 + 20}
          y="95"
          className="text-sm font-bold fill-green-700"
        >
          6:30 PM
        </text>
      </svg>
    </div>
  );
};

export default MovingSun;
